apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: {{ .Values.postgres.replicaCount }}
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          ports:
            - name: postgresql
              containerPort: {{ .Values.postgres.service.port }}
          env:
            {{ toYaml .Values.postgres.env | nindent 12 }}
          volumeMounts:
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  pg_isready -U postgres && \
                  psql -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'keycloak';" | grep -q 1
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            {{ toYaml .Values.postgres.resources | nindent 12 }}
      volumes:
        - name: init-script
          configMap:
            name: postgres-init-script
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
spec:
  replicas: {{ .Values.keycloak.replicaCount }}
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"

              until psql -h postgres -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'keycloak';" | grep -q 1; do
                echo "Waiting for keycloak schema to be created..."
                sleep 2
              done
              echo "Keycloak schema is ready!"
          env:
            - name: PGPASSWORD
              value: "postgres123"
      containers:
        - name: keycloak
          image: "{{ .Values.keycloak.image.repository }}:{{ .Values.keycloak.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
            - name: management
              containerPort: 9000
          env:
            {{ toYaml .Values.keycloak.env | nindent 12 }}
          resources:
            {{ toYaml .Values.keycloak.resources | nindent 12 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: students
spec:
  replicas: {{ .Values.students.replicaCount }}
  selector:
    matchLabels:
      app: students
  template:
    metadata:
      labels:
        app: students
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"

              until psql -h postgres -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'keycloak';" | grep -q 1; do
                echo "Waiting for keycloak schema to be created..."
                sleep 2
              done
              echo "Keycloak schema is ready!"
          env:
            - name: PGPASSWORD
              value: "postgres123"
      containers:
        - name: students
          image: "{{ .Values.students.image.repository }}:{{ .Values.students.image.tag }}"
          imagePullPolicy: {{ .Values.students.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
            - name: management
              containerPort: 9000
          env:
            {{ toYaml .Values.students.env | nindent 12 }}
          resources:
            {{ toYaml .Values.students.resources | nindent 12 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library
spec:
  replicas: {{ .Values.library.replicaCount }}
  selector:
    matchLabels:
      app: library
  template:
    metadata:
      labels:
        app: library
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"

              until psql -h postgres -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'library';" | grep -q 1; do
                echo "Waiting for library schema to be created..."
                sleep 2
              done
              echo "library schema is ready!"
          env:
            - name: PGPASSWORD
              value: "postgres123"
      containers:
        - name: library
          image: "{{ .Values.library.image.repository }}:{{ .Values.library.image.tag }}"
          imagePullPolicy: {{ .Values.library.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
          env:
            {{ toYaml .Values.library.env | nindent 12 }}
          resources:
            {{ toYaml .Values.library.resources | nindent 12 }}
