apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: {{ .Values.postgres.replicaCount }}
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          ports:
            - name: postgresql
              containerPort: {{ .Values.postgres.service.port }}
          env:
            {{ toYaml .Values.postgres.env | nindent 12 }}
          volumeMounts:
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  pg_isready -U postgres && \
                  psql -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'keycloak';" | grep -q 1
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            {{ toYaml .Values.postgres.resources | nindent 12 }}
      volumes:
        - name: init-script
          configMap:
            name: postgres-init-script
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: {{ .Values.postgres.pvc.name }}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
spec:
  replicas: {{ .Values.keycloak.replicaCount }}
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"

              until psql -h postgres -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'keycloak';" | grep -q 1; do
                echo "Waiting for keycloak schema to be created..."
                sleep 2
              done
              echo "Keycloak schema is ready!"
          env:
            - name: PGPASSWORD
              value: {{.Values.postgres.postgresDbPass}}
      containers:
        - name: keycloak
          image: "{{ .Values.keycloak.image.repository }}:{{ .Values.keycloak.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
            - name: management
              containerPort: 9000
          env:
            {{ toYaml .Values.keycloak.env | nindent 12 }}
          resources:
            {{ toYaml .Values.keycloak.resources | nindent 12 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: students
spec:
  replicas: {{ .Values.students.replicaCount }}
  selector:
    matchLabels:
      app: students
  template:
    metadata:
      labels:
        app: students
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"

              until psql -h postgres -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'keycloak';" | grep -q 1; do
                echo "Waiting for keycloak schema to be created..."
                sleep 2
              done
              echo "Keycloak schema is ready!"
          env:
            - name: PGPASSWORD
              value: {{.Values.postgres.postgresDbPass}}
      containers:
        - name: students
          image: "{{ .Values.students.image.repository }}:{{ .Values.students.image.tag }}"
          imagePullPolicy: {{ .Values.students.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
            - name: management
              containerPort: 9090
          env:
            {{ toYaml .Values.students.env | nindent 12 }}
          resources:
            {{ toYaml .Values.students.resources | nindent 12 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library
spec:
  replicas: {{ .Values.library.replicaCount }}
  selector:
    matchLabels:
      app: library
  template:
    metadata:
      labels:
        app: library
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"

              until psql -h postgres -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'library';" | grep -q 1; do
                echo "Waiting for library schema to be created..."
                sleep 2
              done
              echo "library schema is ready!"
          env:
            - name: PGPASSWORD
              value: {{.Values.postgres.postgresDbPass}}
      containers:
        - name: library
          image: "{{ .Values.library.image.repository }}:{{ .Values.library.image.tag }}"
          imagePullPolicy: {{ .Values.library.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
            - name: management
              containerPort: 9090
              protocol: TCP
          env:
            {{ toYaml .Values.library.env | nindent 12 }}
          resources:
            {{ toYaml .Values.library.resources | nindent 12 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apigateway
spec:
  replicas: {{ .Values.apigateway.replicaCount }}
  selector:
    matchLabels:
      app: apigateway
  template:
    metadata:
      labels:
        app: apigateway
    spec:
      initContainers:
        - name: wait-for-keycloak
          image: curlimages/curl:8.5.0
          command:
            - sh
            - -c
            - |
              echo "Waiting for Keycloak to be ready..."
              until curl -sf http://keycloak:8080/keycloak/auth/realms/school/.well-known/openid-configuration > /dev/null; do
                echo "Keycloak not ready yet..."
                sleep 5
              done
              echo "Keycloak is ready!"
      containers:
        - name: apigateway
          image: "{{ .Values.apigateway.image.repository }}:{{ .Values.apigateway.image.tag }}"
          imagePullPolicy: {{ .Values.apigateway.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
          env:
            {{ toYaml .Values.apigateway.env | nindent 12 }}
          resources:
            {{ toYaml .Values.apigateway.resources | nindent 12 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: course
spec:
  replicas: {{ .Values.course.replicaCount }}
  selector:
    matchLabels:
      app: course
  template:
    metadata:
      labels:
        app: course
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"

              until psql -h postgres -U postgres -d schooldb -c "SELECT 1 FROM information_schema.schemata WHERE schema_name = 'courses';" | grep -q 1; do
                echo "Waiting for courses schema to be created..."
                sleep 2
              done
              echo "courses schema is ready!"
          env:
            - name: PGPASSWORD
              value: {{.Values.postgres.postgresDbPass}}

      containers:
        - name: course
          image: "{{ .Values.course.image.repository }}:{{ .Values.course.image.tag }}"
          imagePullPolicy: {{ .Values.course.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
            - name: management
              containerPort: 9090
              protocol: TCP

          env:
            {{ toYaml .Values.course.env | nindent 12 }}
          resources:
            {{ toYaml .Values.course.resources | nindent 12 }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.rabbitmq.replicaCount }}
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      hostname: rabbitmq
      containers:
        - name: rabbitmq
          image: "{{ .Values.rabbitmq.image.repository }}:{{ .Values.rabbitmq.image.tag }}"
          imagePullPolicy: {{ .Values.rabbitmq.image.pullPolicy }}
          ports:
            - name: amqp
              containerPort: 5672
              protocol: TCP
            - name: management
              containerPort: 15672
              protocol: TCP
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: {{ .Values.rabbitmq.auth.username | quote }}
            - name: RABBITMQ_DEFAULT_PASS
              value: {{ .Values.rabbitmq.auth.password | quote }}
            - name: RABBITMQ_DEFAULT_VHOST
              value: {{ .Values.rabbitmq.auth.vhost | quote }}
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
          livenessProbe:
            exec:
              command:
                - rabbitmq-diagnostics
                - -q
                - ping
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - rabbitmq-diagnostics
                - -q
                - ping
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 3
          resources:
            {{- toYaml .Values.rabbitmq.resources | nindent 12 }}
      volumes:
        - name: rabbitmq-data
          persistentVolumeClaim:
            claimName: rabbitmq-pvc